/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Schoolware.UI.Template;

import Schoolware.UI.MouseEventCollectionPanel;
import Schoolware.Unit.Question;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.swing.JOptionPane;

/**
 *
 * @author yukun
 */
public abstract class AbstractTestPanel extends MouseEventCollectionPanel {

    private int currentQuestionID;
    private ArrayList<Integer> answerOrder;
    private QuestionPanel qp;
    private ContentPanel cp;
    private Question[] questionSet;
    private Hashtable<Integer, String[]> answers;
    private String introduction;
    private String path;

    public AbstractTestPanel(Question[] questionSet, String introduction, String path) {
        init(questionSet, introduction);
        this.path = path;
    }

    private void init(Question[] questionSet, String introduction) {
        answerOrder = new ArrayList<>();
        this.introduction = introduction;
        initComponents();
        if (questionSet == null) {
            questionSet = new Question[0];
        }
        this.questionSet = new Question[questionSet.length];
        answers = new Hashtable<Integer, String[]>();
        System.arraycopy(questionSet, 0, this.questionSet, 0, this.questionSet.length);
        jProgressBar1.setMaximum(this.questionSet.length);
        currentQuestionID = -1;
        validate();
    }

    @Override
    public void validate() {
        if (currentQuestionID == -1) {
            cp = new ContentPanel(introduction, "Introduction");
            mainPanel.removeAll();
            mainPanel.add(cp);
        } else if (currentQuestionID == questionSet.length) {
            nextButton.setText("submit");
            cp = new ContentPanel("press submit button to submit score", "submit score");
            mainPanel.removeAll();
            mainPanel.add(cp);
        } else {
            long time = 0;
            if (getRecord().containsKey(currentQuestionID)) {
                time = getRecord().get(currentQuestionID).getTime();
            }

            qp = new QuestionPanel(questionSet[currentQuestionID], answers.get(currentQuestionID), time);
            mainPanel.removeAll();
            mainPanel.add(qp);
        }
        if (currentQuestionID == 0 || currentQuestionID == -1) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }
        jProgressBar1.setValue(currentQuestionID);
        super.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        mainPanel.setLayout(new java.awt.GridLayout(1, 0));

        previousButton.setText("previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(41, 41, 41)
                .add(previousButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .add(40, 40, 40)
                .add(nextButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .add(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(previousButton)
                    .add(nextButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jProgressBar1.setPreferredSize(new java.awt.Dimension(146, 40));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel2Layout.createSequentialGroup()
                .add(14, 14, 14)
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (qp != null && currentQuestionID < questionSet.length) {
            answers.put(currentQuestionID, qp.getAnswer());
        }
        answerOrder.remove(answerOrder.size() - 1);
        currentQuestionID = answerOrder.get(answerOrder.size() - 1);
        validate();
    }//GEN-LAST:event_previousButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (currentQuestionID == -1) {
            currentQuestionID = getNextQuestionID(currentQuestionID);
            answerOrder.add(currentQuestionID);
        } else if (currentQuestionID >= questionSet.length) {
            if (submit(getPath())) {
                JOptionPane.showMessageDialog(null, "you got " + (getFinalScore() / getTotalScore() * 100 + "").substring(0, 4) + "%", "result", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            } else {
                JOptionPane.showMessageDialog(null, "submit unsuccess", "submition", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            if (qp != null && qp.getAnswer().length == 0) {
                JOptionPane.showMessageDialog(null, "please write the answer", "error", JOptionPane.ERROR_MESSAGE);

            } else {
                answers.put(currentQuestionID, qp.getAnswer());
                currentQuestionID = getNextQuestionID(currentQuestionID);
                answerOrder.add(currentQuestionID);
            }
        }
        validate();
    }//GEN-LAST:event_nextButtonActionPerformed

    public Hashtable<Integer, String[]> getAnswers() {
        return answers;
    }

    public ArrayList<Integer> getAnswerOrder() {
        return answerOrder;
    }

    @Override
    public int getCurrentQuestionID() {
        if (currentQuestionID < 0 || currentQuestionID >= questionSet.length) {
            return -1;
        }
        return currentQuestionID;
    }

    @Override
    public String[] getUserAnswer(int questionID) {
        if (questionID < 0 || questionID >= questionSet.length) {
            return null;
        }
        return getAnswers().get(questionID);
    }

    @Override
    public String[] getCorrectAnswer(int questionID) {
        if (questionID < 0 || questionID >= questionSet.length) {
            return null;
        }
        return questionSet[questionID].getCorrectAnswer();
    }

    @Override
    public double getTotalMark(int questionID) {
        if (questionID < 0 || questionID >= questionSet.length) {
            return 0.0;
        }
        return questionSet[questionID].getTotalScore();
    }

    @Override
    public int getQuestionType(int questionID) {
        return questionSet[questionID].getType();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    // End of variables declaration//GEN-END:variables

    public abstract int getNextQuestionID(int currentQuestionID);

    public abstract double getFinalScore();

    public abstract double getTotalScore();

    public abstract String getPath();
}
